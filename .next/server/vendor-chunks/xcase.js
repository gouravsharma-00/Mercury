"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xcase";
exports.ids = ["vendor-chunks/xcase"];
exports.modules = {

/***/ "(rsc)/./node_modules/xcase/es5/index.js":
/*!*****************************************!*\
  !*** ./node_modules/xcase/es5/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nfunction isLower(char) {\n  return char >= 0x61 /* 'a' */ && char <= 0x7a /* 'z' */;\n}\n\nfunction isUpper(char) {\n  return char >= 0x41 /* 'A' */ && char <= 0x5a /* 'Z' */;\n}\n\nfunction isDigit(char) {\n  return char >= 0x30 /* '0' */ && char <= 0x39 /* '9' */;\n}\n\nfunction toUpper(char) {\n  return char - 0x20;\n}\n\nfunction toUpperSafe(char) {\n  if (isLower(char)) {\n    return char - 0x20;\n  }\n  return char;\n}\n\nfunction toLower(char) {\n  return char + 0x20;\n}\n\nfunction camelize$1(str, separator) {\n  var firstChar = str.charCodeAt(0);\n  if (isDigit(firstChar) || isUpper(firstChar) || firstChar == separator) {\n    return str;\n  }\n  var out = [];\n  var changed = false;\n  if (isUpper(firstChar)) {\n    changed = true;\n    out.push(toLower(firstChar));\n  } else {\n    out.push(firstChar);\n  }\n\n  var length = str.length;\n  for (var i = 1; i < length; ++i) {\n    var c = str.charCodeAt(i);\n    if (c === separator) {\n      changed = true;\n      c = str.charCodeAt(++i);\n      if (isNaN(c)) {\n        return str;\n      }\n      out.push(toUpperSafe(c));\n    } else {\n      out.push(c);\n    }\n  }\n  return changed ? String.fromCharCode.apply(undefined, out) : str;\n}\n\nfunction decamelize$1(str, separator) {\n  var firstChar = str.charCodeAt(0);\n  if (!isLower(firstChar)) {\n    return str;\n  }\n  var length = str.length;\n  var changed = false;\n  var out = [];\n  for (var i = 0; i < length; ++i) {\n    var c = str.charCodeAt(i);\n    if (isUpper(c)) {\n      out.push(separator);\n      out.push(toLower(c));\n      changed = true;\n    } else {\n      out.push(c);\n    }\n  }\n  return changed ? String.fromCharCode.apply(undefined, out) : str;\n}\n\nfunction pascalize$1(str, separator) {\n  var firstChar = str.charCodeAt(0);\n  if (isDigit(firstChar) || firstChar == separator) {\n    return str;\n  }\n  var length = str.length;\n  var changed = false;\n  var out = [];\n  for (var i = 0; i < length; ++i) {\n    var c = str.charCodeAt(i);\n    if (c === separator) {\n      changed = true;\n      c = str.charCodeAt(++i);\n      if (isNaN(c)) {\n        return str;\n      }\n      out.push(toUpperSafe(c));\n    } else if (i === 0 && isLower(c)) {\n      changed = true;\n      out.push(toUpper(c));\n    } else {\n      out.push(c);\n    }\n  }\n  return changed ? String.fromCharCode.apply(undefined, out) : str;\n}\n\nfunction depascalize$1(str, separator) {\n  var firstChar = str.charCodeAt(0);\n  if (!isUpper(firstChar)) {\n    return str;\n  }\n  var length = str.length;\n  var changed = false;\n  var out = [];\n  for (var i = 0; i < length; ++i) {\n    var c = str.charCodeAt(i);\n    if (isUpper(c)) {\n      if (i > 0) {\n        out.push(separator);\n      }\n      out.push(toLower(c));\n      changed = true;\n    } else {\n      out.push(c);\n    }\n  }\n  return changed ? String.fromCharCode.apply(undefined, out) : str;\n}\n\nfunction shouldProcessValue(value) {\n  return value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object' && !(value instanceof Date) && !(value instanceof Function);\n}\n\nfunction processKeys(obj, fun, opts) {\n  var obj2 = void 0;\n  if (obj instanceof Array) {\n    obj2 = [];\n  } else {\n    if (typeof obj.prototype !== 'undefined') {\n      // return non-plain object unchanged\n      return obj;\n    }\n    obj2 = {};\n  }\n  for (var key in obj) {\n    var value = obj[key];\n    if (typeof key === 'string') key = fun(key, opts && opts.separator);\n    if (shouldProcessValue(value)) {\n      obj2[key] = processKeys(value, fun, opts);\n    } else {\n      obj2[key] = value;\n    }\n  }\n  return obj2;\n}\n\nfunction processKeysInPlace(obj, fun, opts) {\n  var keys = Object.keys(obj);\n  for (var idx = 0; idx < keys.length; ++idx) {\n    var key = keys[idx];\n    var value = obj[key];\n    var newKey = fun(key, opts && opts.separator);\n    if (newKey !== key) {\n      delete obj[key];\n    }\n    if (shouldProcessValue(value)) {\n      obj[newKey] = processKeys(value, fun, opts);\n    } else {\n      obj[newKey] = value;\n    }\n  }\n  return obj;\n}\n\nfunction camelize$$1(str, separator) {\n  return camelize$1(str, separator && separator.charCodeAt(0) || 0x5f /* _ */);\n}\n\nfunction decamelize$$1(str, separator) {\n  return decamelize$1(str, separator && separator.charCodeAt(0) || 0x5f /* _ */);\n}\n\nfunction pascalize$$1(str, separator) {\n  return pascalize$1(str, separator && separator.charCodeAt(0) || 0x5f /* _ */);\n}\n\nfunction depascalize$$1(str, separator) {\n  return depascalize$1(str, separator && separator.charCodeAt(0) || 0x5f /* _ */);\n}\n\nfunction camelizeKeys(obj, opts) {\n  opts = opts || {};\n  if (!shouldProcessValue(obj)) return obj;\n  if (opts.inPlace) return processKeysInPlace(obj, camelize$$1, opts);\n  return processKeys(obj, camelize$$1, opts);\n}\n\nfunction decamelizeKeys(obj, opts) {\n  opts = opts || {};\n  if (!shouldProcessValue(obj)) return obj;\n  if (opts.inPlace) return processKeysInPlace(obj, decamelize$$1, opts);\n  return processKeys(obj, decamelize$$1, opts);\n}\n\nfunction pascalizeKeys(obj, opts) {\n  opts = opts || {};\n  if (!shouldProcessValue(obj)) return obj;\n  if (opts.inPlace) return processKeysInPlace(obj, pascalize$$1, opts);\n  return processKeys(obj, pascalize$$1, opts);\n}\n\nfunction depascalizeKeys(obj, opts) {\n  opts = opts || {};\n  if (!shouldProcessValue(obj)) return obj;\n  if (opts.inPlace) return processKeysInPlace(obj, depascalize$$1, opts);\n  return processKeys(obj, depascalize$$1, opts);\n}\n\nexports.camelize = camelize$$1;\nexports.decamelize = decamelize$$1;\nexports.pascalize = pascalize$$1;\nexports.depascalize = depascalize$$1;\nexports.camelizeKeys = camelizeKeys;\nexports.decamelizeKeys = decamelizeKeys;\nexports.pascalizeKeys = pascalizeKeys;\nexports.depascalizeKeys = depascalizeKeys;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/xcase/es5/index.js\n");

/***/ })

};
;